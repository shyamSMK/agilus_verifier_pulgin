# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-07-05T08:17:16+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, Optional, Union

from pydantic import ConfigDict, EmailStr, Field, BaseModel


class Gender(str, Enum):
    M = 'M'
    F = 'F'
    O = 'O'


class RootCancelBookingInfoCancelCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    cancel_reason: Optional[str] = Field(
        None,
        description='Enter Reason for Cancellation',
        title='Reason for Cancellation',
    )
    refund_account: Optional[str] = Field(
        None, description='Enter Account for Refund', title='Account for Refund'
    )
    confirm_cancel: Optional[bool] = Field(
        None, description='Enter Conform Cancellation', title='Conform Cancellation'
    )
    proof: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Enter Upload Passbook or UPI ',
        title='Upload Passbook or UPI ',
    )


class RootJourneyInfoJouneryCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    from_station: Optional[str] = Field(
        None, description='Enter From Station', title='From Station'
    )
    to_station: Optional[str] = Field(
        None, description='Enter To Station', title='To Station'
    )
    journey_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Journey Date'
    )
    quota: Optional[str] = Field(
        None, description='Enter Quote (General,Tatkal)', title='Quote (General,Tatkal)'
    )
    train_number: Optional[str] = Field(
        None, description='Enter Train Number', title='Train Number'
    )
    train_name: Optional[str] = Field(
        None, description='Enter Train Name', title='Train Name'
    )


class RootPassengerInfoPassengerCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='Enter Full Name', title='Full Name')
    age: Optional[int] = Field(None, description='Enter Age', title='Age')
    gender: Optional[Gender] = Field(None, description='Select Option', title='Gender')
    aadhar: Optional[int] = Field(
        None, description='Enter Aadhar Number', title='Aadhar Number'
    )
    mobile: Optional[str] = Field(
        None, description='Enter Mobile Number', title='Mobile Number'
    )
    email: Optional[EmailStr] = Field(
        None, description='Enter Email ID', title='Email ID'
    )
    id_proof: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload ID proof', title='Upload ID proof'
    )


class RootPaymentDetailsInfoPaymentCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    card_number: Optional[int] = Field(
        None, description='Enter card Number', title='card Number'
    )
    card_holder: Optional[str] = Field(
        None, description='Enter Card Holder Name', title='Card Holder Name'
    )
    expiry_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Expiry Date (MM/YY)'
    )
    cvv: Optional[str] = Field(None, description='Enter CVV', title='CVV')
    transaction_proof: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload payment proof', title='Upload payment proof'
    )


class RootPlatformTicketInfoPlantformTicketCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    station_name: Optional[str] = Field(
        None, description='Enter Station Name', title='Station Name'
    )
    number_of_ticket: Optional[int] = Field(
        None, description="Enter Number of Ticket's", title="Number of Ticket's"
    )
    total_amount: Optional[float] = Field(
        None, description='Enter Total Amount', title='Total Amount'
    )
    payment: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload payment Receipt', title='Upload payment Receipt'
    )


class RootTrackingInfoTrackingCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    pnr_number: Optional[str] = Field(
        None, description='Enter PNR Number', title='PNR Number'
    )
    booking_status: Optional[str] = Field(
        None, description='Enter Current Booking Status', title='Current Booking Status'
    )
    seat_number: Optional[str] = Field(
        None, description='Enter Seat/Berth Number', title='Seat/Berth Number'
    )
    coach_number: Optional[str] = Field(
        None, description='Enter Coach Number', title='Coach Number'
    )
    tracking_file: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload ScreenShot', title='Upload ScreenShot'
    )


class RootTrainTicketInfoBookingCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    jounery_reference_id: Optional[str] = Field(
        None, description='Enter Jounery Reference ID', title='Jounery Reference ID'
    )
    number_of_passengers: Optional[int] = Field(
        None, description='Enter Number Of Passengers', title='Number Of Passengers'
    )
    total_fare: Optional[float] = Field(
        None, description='Enter Total Fare', title='Total Fare'
    )
    upload_ticket_receipt: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter upload Booking Receipt', title='upload Booking Receipt'
    )
    booking_confirmed: Optional[bool] = Field(
        None, description='Enter Booking Confirmed?', title='Booking Confirmed?'
    )


class RootCancelBookingInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    cancel_card: Optional[RootCancelBookingInfoCancelCard] = Field(
        None, title='Cancel Ticket'
    )


class RootJourneyInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    jounery_card: Optional[RootJourneyInfoJouneryCard] = Field(
        None, title='Jounery Information'
    )


class RootPassengerInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    Passenger_card: Optional[RootPassengerInfoPassengerCard] = Field(
        None, title='Passenger Information'
    )


class RootPaymentDetailsInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payment_card: Optional[RootPaymentDetailsInfoPaymentCard] = Field(
        None, title='Payment'
    )


class RootPlatformTicketInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    plantform_ticket_card: Optional[RootPlatformTicketInfoPlantformTicketCard] = Field(
        None, title='Platform Ticket Booking'
    )


class RootTrackingInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    tracking_card: Optional[RootTrackingInfoTrackingCard] = Field(
        None, title='Booking Status'
    )


class RootTrainTicketInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    booking_card: Optional[RootTrainTicketInfoBookingCard] = Field(
        None, title='Train Ticket Booking'
    )


class Irctcbookingform(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    passenger_info: Optional[RootPassengerInfo] = Field(None, title='passenger Details')
    journey_info: Optional[RootJourneyInfo] = Field(None, title='Travel Info')
    train_ticket_info: Optional[RootTrainTicketInfo] = Field(
        None, title='Train Ticket Section'
    )
    platform_ticket_info: Optional[RootPlatformTicketInfo] = Field(
        None, title='Platform Access'
    )
    payment_details_info: Optional[RootPaymentDetailsInfo] = Field(
        None, title='Payment Info'
    )
    tracking_info: Optional[RootTrackingInfo] = Field(None, title='Tracking Info')
    cancel_booking_info: Optional[RootCancelBookingInfo] = Field(
        None, title='Cancel Info'
    )
